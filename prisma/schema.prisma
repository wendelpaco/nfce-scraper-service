generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UrlQueue {
  id               String    @id @default(uuid())
  url              String
  urlFinal         String?
  webhookUrl       String?
  status           String    @default("PENDING") // "PENDING" | "PROCESSING" | "DONE" | "ERROR" | "BLOCKED" | "INVALID"
  lastErrorMessage String?
  bullJobId        String?
  createdAt        DateTime  @default(now())
  
  // Campos para tracking de tempo de processamento
  processingStartedAt DateTime?
  processingEndedAt   DateTime?

  apiTokenId String?
  apiToken   ApiToken? @relation(fields: [apiTokenId], references: [id])

  notaResults NotaResult[]

  @@index([status])
  @@index([createdAt])
}

model NotaResult {
  id         String   @id @default(uuid())
  url        String
  webhookUrl String?
  jsonData   Json
  createdAt  DateTime @default(now())

  urlQueueId String
  urlQueue   UrlQueue @relation(fields: [urlQueueId], references: [id])

  @@index([urlQueueId])
}

model ApiUser {
  id        String     @id @default(uuid())
  name      String
  email     String?    @unique
  createdAt DateTime   @default(now())
  tokens    ApiToken[]
}

model ApiToken {
  id        String   @id @default(uuid())
  name      String
  token     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  apiUserId String
  apiUser   ApiUser @relation(fields: [apiUserId], references: [id])

  urlQueues UrlQueue[]
}
